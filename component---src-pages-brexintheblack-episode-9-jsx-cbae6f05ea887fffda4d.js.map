{"version":3,"sources":["webpack:///./src/components/podcast/transcriptHero/elements.jsx","webpack:///./src/components/podcast/transcriptHero/index.jsx","webpack:///./src/components/brexInTheBlack/episodeNineTranscript.jsx","webpack:///./src/pages/brexintheblack/episode-9.jsx","webpack:///./src/components/podcast/transcript/elements.jsx","webpack:///./src/components/podcast/transcript/index.jsx","webpack:///./src/components/ContactForm/elements.jsx","webpack:///./src/components/ContactForm/index.jsx"],"names":["Container","padding","backgroundColor","colors","white","DateLocation","color","black","textTransform","fontSize","lineHeight","letterSpacing","marginBottom","Primary","primary","Title","fontWeight","TranscriptHero","title","date","location","personTitle","gutterWidth","column","span","spanMedium","episodeNineTranscript","embedLink","transcript","speaker","text","Fragment","Episode","whiteContentBackground","description","paddingTop","display","alignItems","justifyContent","flexDirection","Body","margin","TranscriptText","Speaker","breakPoints","small","TranscriptSection","AudioContainer","width","medium","RowWrapper","Transcript","wrappedSpacing","src","frameBorder","scrolling","map","transcriptSection","i","withTopMargin","key","spanSmall","ContactForm","body","buttonTitle","formUrl","inputName","textAlign","paddingBottom","maxWidth","InputField","Button","flexGrow","height","border","cursor","Form","textColor","onDarkBackground","action","target","placeholder","type","autoComplete","name"],"mappings":"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","file":"component---src-pages-brexintheblack-episode-9-jsx-cbae6f05ea887fffda4d.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport { padding } from \"polished\";\n\nexport const Container = styled(\"div\")({\n  ...padding(100, 0, 0, 0),\n  backgroundColor: colors.white,\n});\n\nexport const DateLocation = styled(\"div\")({\n  color: colors.black,\n  textTransform: \"uppercase\",\n  fontSize: 12,\n  lineHeight: 1.4,\n  letterSpacing: 1.05,\n  marginBottom: 30,\n});\n\nexport const Primary = styled(\"span\")({\n  color: colors.primary,\n});\n\nexport const Title = styled(\"h1\")({\n  color: colors.black,\n  fontSize: 32,\n  lineHeight: 1.31,\n  fontWeight: 600,\n  marginBottom: 24,\n});\n","import React from \"react\";\n\nimport { Row, Column } from \"components/Grid.tsx\";\n\nimport { Container, DateLocation, Primary, Title } from \"./elements\";\n\nconst TranscriptHero = ({ title, date, location, personTitle }) => (\n  <Container>\n    <Row gutterWidth={26} column={30}>\n      <Column span={2} spanMedium={0} />\n      <Column span={8} spanMedium={12}>\n        <div>\n          <DateLocation>{`${date} - ${location}`}</DateLocation>\n          <Title>\n            {title}\n            {\": \"}\n            <Primary>{personTitle}</Primary>\n          </Title>\n        </div>\n      </Column>\n      <Column span={2} spanMedium={0} />\n    </Row>\n  </Container>\n);\n\nexport default TranscriptHero;\n","import React from \"react\";\n\nexport const episodeNineTranscript = {\n  embedLink:\n    \"https://anchor.fm/christopher-read/embed/episodes/The-Monthly-Close-e4cks7/a-aharpc\",\n  date: \"May 21 2019\",\n  location: \"San Francisco, CA\",\n  title: \"The Monthly Close\",\n  personTitle: \"Michael Tannenbaum\",\n  transcript: [\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          Welcome to brex in the black. We&#39;ve got our CFO here, Michael, to\n          talk about monthly closes, Michael.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael T\",\n      text: <React.Fragment>Hey, thank you.</React.Fragment>,\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          So what is a monthly close, why is it important, and then how do you\n          go about doing it?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael T\",\n      text: (\n        <React.Fragment>\n          So a monthly close is a process that a company goes through - two\n          phases - basically to finalize the month activity within the financial\n          statements. So, what was your revenue and what were your expenses for\n          the month. And it&#39;s important to do that monthly, so you stay on\n          top of your books. And the reason you&#39;re doing this close, is\n          because financial statements are always going to be considered between\n          a moment in time. People want to know, what was your revenue and\n          expenses for the month, because the months ultimately sum to quaters\n          and quarters ultimately sum to years. That&#39;s the way that people\n          review financial activity, is over discrete moments in time.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: <React.Fragment>The week is too frequent?</React.Fragment>,\n    },\n    {\n      speaker: \"Michael T\",\n      text: (\n        <React.Fragment>\n          Week is too frequent.\n          <br />\n          <br />\n          But the point is, there&#39;s always going to be at some point,\n          you&#39;re going to have to answer the question what happened between\n          day x and y. And when you&#39;re ending a period, there are certain\n          estimates that you have to make. One example is accrued expenses. So\n          what expenses happened that you haven&#39;t necessarily got the bill\n          for? If you&#39;ve spent a bunch of money on advertising, but someone\n          hasn&#39;t sent you the bill, you still have spent that money. And\n          that&#39;s still activity that happened in that month. That&#39;s\n          known as accrual accounting. And so you need to go through your\n          approvals. Because whatever the end point of your financial statements\n          are, there&#39;s going to be some things that were incurred, but not\n          necessarily received or build, just like there&#39;s going to be\n          revenue that you earned that you didn&#39;t necessarily receive in\n          cash. So you need to get into the habit of looking at the discrete\n          period in time and the month is sort of the standard to do that in\n          accounting.\n          <br />\n          <br />\n          So with that, what you do then is basically set up a series of\n          processes, one of which considers all of the accrued revenue and\n          accrued expenses. But then there&#39;s others that we&#39;ll talk\n          about but you set all that up and sort of write yourself a note or a\n          document or an SOP - standard operating procedure - of what do I do\n          each month to make sure my books and records are accurate? One of them\n          we talked about: rules. Another obvious one is reconciliations.\n          <br />\n          <br />\n          So on a different podcasts, we talked about this as well, but\n          reconciling your cash to your bank account, just making sure your\n          books and records are up to date at the end of a period such that your\n          cash balance on your bank account matches what your cash balance is in\n          your financial statements. And if it doesn&#39;t, that you have a\n          clear understanding of why no. For example, an uncleared check, right.\n          So that&#39;s another thing you do at the close.\n          <br />\n          <br />\n          You&#39;d also, on the accrual side, look for our payroll because\n          it&#39;s very rare that payroll falls at the end of the month - it\n          doesn&#39;t fall on the exact day. So people have earned some\n          compensation that you haven&#39;t yet paid them — a classic example of\n          an accrual that you would do as part of the close process, right?\n          Because when it gets to year end, what&#39;s the chance payday lines\n          up, one out of 14? If you&#39;re paying weekly, right, so probably\n          less because you don&#39;t pay weekends — it&#39;s actually more since\n          you don&#39;t get weekends, forgive my math.\n          <br />\n          <br />I also think in monthly close, depending on how early stage\n          company, a good thing to do is also to review the monthly close versus\n          your budget - how did it move relative to your expectations? One,\n          because that may help you catch errors in your financials and two, if\n          your financials are accurate, then what&#39;s going on your business?\n          So that&#39;s kind of a forcing function for you to actually look at\n          the health of your business, although I imagine that be more difficult\n          for startups because they may not have so much information.\n          There&#39;s so much up in the air, but it&#39;s just you don&#39;t\n          want to let these things get too far ahead of themselves. You always\n          want to be watching this, because when financials go unreconciled and\n          unclosed for four months it can become a really big problem.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          Anything else in terms of accounting and the monthly close?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael T\",\n      text: (\n        <React.Fragment>\n          Revenue recognition to the extent you have revenue is also something\n          you would do each monthly close. So sometimes revenue recognition is\n          super obvious. But other times, like in software, and even in\n          financial services, sometimes it&#39;s not as obvious because\n          there&#39;s estimates. And so you have to think about that. One\n          example would be what have you sold this month, and what sort of what\n          revenue you&#39;ve earned, even if you have haven&#39;t necessarily\n          received the cash for that. And so that&#39;s a little bit like the\n          accrual point I talked about before, but I just wanted to re-emphasize\n          that because revenue recognition for obvious reasons is so important.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          All right, Michael, thanks so much for coming on brex in the black.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael T\",\n      text: <React.Fragment>Thank you</React.Fragment>,\n    },\n  ],\n};\n","import React from \"react\";\n\nimport Layout from \"components/layout\";\n\nimport TranscriptHero from \"components/podcast/transcriptHero\";\nimport Transcript from \"components/podcast/transcript\";\nimport { episodeNineTranscript as transcript } from \"components/brexInTheBlack/episodeNineTranscript\";\n\nconst Episode = ({ location }) => (\n  <Layout\n    location={location}\n    whiteContentBackground\n    title=\"Brex In the Black | Monthly Close\"\n    description=\"Why it’s important, and how to do so.\"\n  >\n    <TranscriptHero\n      date={transcript.date}\n      location={transcript.location}\n      personTitle={transcript.personTitle}\n      title={transcript.title}\n    />\n    <Transcript\n      embedLink={transcript.embedLink}\n      title={transcript.title}\n      transcript={transcript.transcript}\n    />\n  </Layout>\n);\n\nexport default Episode;\n","import styled from \"@emotion/styled\";\nimport { margin } from \"polished\";\n\nimport { breakPoints } from \"components/Grid.tsx\";\n\nimport colors from \"styles/colors\";\n\nexport const Container = styled(\"section\")({\n  paddingTop: 70,\n  color: colors.black,\n  display: \"flex\",\n  alignItems: \"stretch\",\n  justifyContent: \"flexStart\",\n  flexDirection: \"column\",\n});\n\nexport const Body = styled(\"div\")({\n  ...margin(40, 0, 120, 0),\n});\n\nexport const TranscriptText = styled(\"div\")({\n  display: \"flex\",\n  flexFlow: \"column nowrap\",\n  fontSize: 16,\n  lineHeight: 1.7,\n});\n\nexport const Speaker = styled(\"div\")({\n  fontWeight: 600,\n  fontSize: 16,\n  lineHeight: 1.61,\n  [breakPoints.small]: {\n    marginBottom: -60,\n  },\n});\n\nexport const TranscriptSection = styled(\"div\")({\n  display: \"flex\",\n  flexFlow: \"row nowrap\",\n});\n\nexport const AudioContainer = styled(\"iframe\")({\n  width: \"50%\",\n  margin: \"0 auto\",\n  display: \"block\",\n  marginBottom: 48,\n\n  [breakPoints.medium]: {\n    width: \"70%\",\n  },\n  [breakPoints.small]: {\n    width: \"90%\",\n  },\n});\n\nexport const RowWrapper = styled(\"div\")({\n  paddingTop: 80,\n});\n","import React from \"react\";\n\nimport { Row, Column } from \"components/Grid.tsx\";\n\nimport ContactForm from \"components/ContactForm\";\nimport {\n  Container,\n  AudioContainer,\n  Body,\n  TranscriptText,\n  Speaker,\n  TranscriptSection,\n  RowWrapper,\n} from \"./elements\";\n\n// To DO (Mikalai 2019-09-04): If such constants will be grown will need to move them to one file\n\nconst contactFormUrl =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSdsHxkHI16joNQZ3nUkIBKDdyE2hK57HA4OYJOiIOl27etKWA/formResponse\";\n\nconst Transcript = ({ title, embedLink, transcript }) => (\n  <Container>\n    <Row gutterWidth={26} column={30}>\n      <Column span={12} wrappedSpacing={0}>\n        <AudioContainer\n          src={embedLink}\n          frameBorder=\"0\"\n          scrolling=\"no\"\n          title={title}\n        />\n      </Column>\n    </Row>\n    <Body>\n      {transcript.map((transcriptSection, i) => (\n        <Row gutterWidth={26} column={30} withTopMargin key={`transcript-${i}`}>\n          <Column span={2} spanMedium={0} />\n          <Column span={2} spanMedium={2} spanSmall={12}>\n            <Speaker>\n              {transcriptSection.speaker}\n              {\":\"}\n            </Speaker>\n          </Column>\n          <Column span={6} spanMedium={10} spanSmall={12}>\n            <TranscriptSection>\n              <TranscriptText>{transcriptSection.text}</TranscriptText>\n            </TranscriptSection>\n          </Column>\n          <Column span={2} spanMedium={0} />\n        </Row>\n      ))}\n      <RowWrapper>\n        <Row padding={30} gutterWidth={26}>\n          <Column span={1} />\n          <Column span={10}>\n            <ContactForm\n              title={null}\n              body=\"Get notified about future episodes of Brex in the Black\"\n              buttonTitle=\"submit\"\n              formUrl={contactFormUrl}\n              inputName=\"entry.182032046\"\n            />\n          </Column>\n          <Column span={1} />\n        </Row>\n      </RowWrapper>\n    </Body>\n  </Container>\n);\n\nexport default Transcript;\n","import styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport { breakPoints } from \"components/Grid.tsx\";\n\nexport const Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  paddingBottom: 165,\n  alignItems: \"center\",\n});\n\nexport const Title = styled(\"h2\")(({ color }) => ({\n  fontSize: 48,\n  lineHeight: \"52px\",\n  color,\n  textAlign: \"center\",\n  margin: \"auto\",\n  fontWeight: 600,\n  paddingBottom: 24,\n\n  [breakPoints.small]: {\n    fontSize: 36,\n  },\n}));\n\nexport const Body = styled(\"div\")(({ color }) => ({\n  fontSize: 16,\n  lineHeight: \"27px\",\n  color,\n  margin: \"auto\",\n  textAlign: \"center\",\n  paddingBottom: 40,\n  maxWidth: 500,\n}));\n\nexport const InputField = styled(\"input\")({\n  width: \"100%\",\n  height: 60,\n  paddingLeft: 20,\n});\n\nexport const Button = styled(\"button\")({\n  flexGrow: 0,\n  backgroundColor: colors.primary,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  fontSize: 12,\n  height: 60,\n  width: 200,\n  color: \"#FFF\",\n  border: \"none\",\n  textTransform: \"uppercase\",\n  \"&:hover\": {\n    cursor: \"pointer\",\n  },\n});\n\nexport const Form = styled(\"form\")({\n  display: \"flex\",\n  width: \"100%\",\n  maxWidth: 600,\n});\n","import React from \"react\";\n\nimport { Container, Title, Body, InputField, Button, Form } from \"./elements\";\n\n// To DO (Abiel 2019-02-23): Remove redirection to Google's \"thank you for submitting\"\n\nconst ContactForm = ({\n  title,\n  body,\n  buttonTitle,\n  formUrl,\n  inputName,\n  onDarkBackground,\n}) => {\n  const textColor = onDarkBackground ? \"#FFF\" : \"#000\";\n  return (\n    <Container>\n      {title && <Title color={textColor}>{title}</Title>}\n      <Body color={textColor}>{body}</Body>\n      <Form action={formUrl} target=\"_blank\">\n        <InputField\n          placeholder=\"Email\"\n          type=\"email\"\n          autoComplete=\"off\"\n          name={inputName}\n        />\n        <Button type=\"submit\">{buttonTitle}</Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n"],"sourceRoot":""}