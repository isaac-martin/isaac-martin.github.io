{"version":3,"sources":["webpack:///./src/components/podcast/transcriptHero/elements.jsx","webpack:///./src/components/podcast/transcriptHero/index.jsx","webpack:///./src/components/podcast/transcript/elements.jsx","webpack:///./src/components/podcast/transcript/index.jsx","webpack:///./src/components/ContactForm/elements.jsx","webpack:///./src/components/ContactForm/index.jsx","webpack:///./src/components/brexInTheBlack/episodeFiveTranscript.jsx","webpack:///./src/pages/brexintheblack/episode-5.jsx"],"names":["Container","padding","backgroundColor","colors","white","DateLocation","color","black","textTransform","fontSize","lineHeight","letterSpacing","marginBottom","Primary","primary","Title","fontWeight","TranscriptHero","title","date","location","personTitle","gutterWidth","column","span","spanMedium","paddingTop","display","alignItems","justifyContent","flexDirection","Body","margin","TranscriptText","Speaker","breakPoints","small","TranscriptSection","AudioContainer","width","medium","RowWrapper","Transcript","embedLink","transcript","wrappedSpacing","src","frameBorder","scrolling","map","transcriptSection","i","withTopMargin","key","spanSmall","speaker","text","ContactForm","body","buttonTitle","formUrl","inputName","textAlign","paddingBottom","maxWidth","InputField","Button","flexGrow","height","border","cursor","Form","textColor","onDarkBackground","action","target","placeholder","type","autoComplete","name","episodeFiveTranscript","Fragment","Episode","whiteContentBackground","description"],"mappings":"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","file":"component---src-pages-brexintheblack-episode-5-jsx-b14feba720107586e1aa.js","sourcesContent":["import styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport { padding } from \"polished\";\n\nexport const Container = styled(\"div\")({\n  ...padding(100, 0, 0, 0),\n  backgroundColor: colors.white,\n});\n\nexport const DateLocation = styled(\"div\")({\n  color: colors.black,\n  textTransform: \"uppercase\",\n  fontSize: 12,\n  lineHeight: 1.4,\n  letterSpacing: 1.05,\n  marginBottom: 30,\n});\n\nexport const Primary = styled(\"span\")({\n  color: colors.primary,\n});\n\nexport const Title = styled(\"h1\")({\n  color: colors.black,\n  fontSize: 32,\n  lineHeight: 1.31,\n  fontWeight: 600,\n  marginBottom: 24,\n});\n","import React from \"react\";\n\nimport { Row, Column } from \"components/Grid.tsx\";\n\nimport { Container, DateLocation, Primary, Title } from \"./elements\";\n\nconst TranscriptHero = ({ title, date, location, personTitle }) => (\n  <Container>\n    <Row gutterWidth={26} column={30}>\n      <Column span={2} spanMedium={0} />\n      <Column span={8} spanMedium={12}>\n        <div>\n          <DateLocation>{`${date} - ${location}`}</DateLocation>\n          <Title>\n            {title}\n            {\": \"}\n            <Primary>{personTitle}</Primary>\n          </Title>\n        </div>\n      </Column>\n      <Column span={2} spanMedium={0} />\n    </Row>\n  </Container>\n);\n\nexport default TranscriptHero;\n","import styled from \"@emotion/styled\";\nimport { margin } from \"polished\";\n\nimport { breakPoints } from \"components/Grid.tsx\";\n\nimport colors from \"styles/colors\";\n\nexport const Container = styled(\"section\")({\n  paddingTop: 70,\n  color: colors.black,\n  display: \"flex\",\n  alignItems: \"stretch\",\n  justifyContent: \"flexStart\",\n  flexDirection: \"column\",\n});\n\nexport const Body = styled(\"div\")({\n  ...margin(40, 0, 120, 0),\n});\n\nexport const TranscriptText = styled(\"div\")({\n  display: \"flex\",\n  flexFlow: \"column nowrap\",\n  fontSize: 16,\n  lineHeight: 1.7,\n});\n\nexport const Speaker = styled(\"div\")({\n  fontWeight: 600,\n  fontSize: 16,\n  lineHeight: 1.61,\n  [breakPoints.small]: {\n    marginBottom: -60,\n  },\n});\n\nexport const TranscriptSection = styled(\"div\")({\n  display: \"flex\",\n  flexFlow: \"row nowrap\",\n});\n\nexport const AudioContainer = styled(\"iframe\")({\n  width: \"50%\",\n  margin: \"0 auto\",\n  display: \"block\",\n  marginBottom: 48,\n\n  [breakPoints.medium]: {\n    width: \"70%\",\n  },\n  [breakPoints.small]: {\n    width: \"90%\",\n  },\n});\n\nexport const RowWrapper = styled(\"div\")({\n  paddingTop: 80,\n});\n","import React from \"react\";\n\nimport { Row, Column } from \"components/Grid.tsx\";\n\nimport ContactForm from \"components/ContactForm\";\nimport {\n  Container,\n  AudioContainer,\n  Body,\n  TranscriptText,\n  Speaker,\n  TranscriptSection,\n  RowWrapper,\n} from \"./elements\";\n\n// To DO (Mikalai 2019-09-04): If such constants will be grown will need to move them to one file\n\nconst contactFormUrl =\n  \"https://docs.google.com/forms/d/e/1FAIpQLSdsHxkHI16joNQZ3nUkIBKDdyE2hK57HA4OYJOiIOl27etKWA/formResponse\";\n\nconst Transcript = ({ title, embedLink, transcript }) => (\n  <Container>\n    <Row gutterWidth={26} column={30}>\n      <Column span={12} wrappedSpacing={0}>\n        <AudioContainer\n          src={embedLink}\n          frameBorder=\"0\"\n          scrolling=\"no\"\n          title={title}\n        />\n      </Column>\n    </Row>\n    <Body>\n      {transcript.map((transcriptSection, i) => (\n        <Row gutterWidth={26} column={30} withTopMargin key={`transcript-${i}`}>\n          <Column span={2} spanMedium={0} />\n          <Column span={2} spanMedium={2} spanSmall={12}>\n            <Speaker>\n              {transcriptSection.speaker}\n              {\":\"}\n            </Speaker>\n          </Column>\n          <Column span={6} spanMedium={10} spanSmall={12}>\n            <TranscriptSection>\n              <TranscriptText>{transcriptSection.text}</TranscriptText>\n            </TranscriptSection>\n          </Column>\n          <Column span={2} spanMedium={0} />\n        </Row>\n      ))}\n      <RowWrapper>\n        <Row padding={30} gutterWidth={26}>\n          <Column span={1} />\n          <Column span={10}>\n            <ContactForm\n              title={null}\n              body=\"Get notified about future episodes of Brex in the Black\"\n              buttonTitle=\"submit\"\n              formUrl={contactFormUrl}\n              inputName=\"entry.182032046\"\n            />\n          </Column>\n          <Column span={1} />\n        </Row>\n      </RowWrapper>\n    </Body>\n  </Container>\n);\n\nexport default Transcript;\n","import styled from \"@emotion/styled\";\nimport colors from \"styles/colors\";\nimport { breakPoints } from \"components/Grid.tsx\";\n\nexport const Container = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  paddingBottom: 165,\n  alignItems: \"center\",\n});\n\nexport const Title = styled(\"h2\")(({ color }) => ({\n  fontSize: 48,\n  lineHeight: \"52px\",\n  color,\n  textAlign: \"center\",\n  margin: \"auto\",\n  fontWeight: 600,\n  paddingBottom: 24,\n\n  [breakPoints.small]: {\n    fontSize: 36,\n  },\n}));\n\nexport const Body = styled(\"div\")(({ color }) => ({\n  fontSize: 16,\n  lineHeight: \"27px\",\n  color,\n  margin: \"auto\",\n  textAlign: \"center\",\n  paddingBottom: 40,\n  maxWidth: 500,\n}));\n\nexport const InputField = styled(\"input\")({\n  width: \"100%\",\n  height: 60,\n  paddingLeft: 20,\n});\n\nexport const Button = styled(\"button\")({\n  flexGrow: 0,\n  backgroundColor: colors.primary,\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  fontSize: 12,\n  height: 60,\n  width: 200,\n  color: \"#FFF\",\n  border: \"none\",\n  textTransform: \"uppercase\",\n  \"&:hover\": {\n    cursor: \"pointer\",\n  },\n});\n\nexport const Form = styled(\"form\")({\n  display: \"flex\",\n  width: \"100%\",\n  maxWidth: 600,\n});\n","import React from \"react\";\n\nimport { Container, Title, Body, InputField, Button, Form } from \"./elements\";\n\n// To DO (Abiel 2019-02-23): Remove redirection to Google's \"thank you for submitting\"\n\nconst ContactForm = ({\n  title,\n  body,\n  buttonTitle,\n  formUrl,\n  inputName,\n  onDarkBackground,\n}) => {\n  const textColor = onDarkBackground ? \"#FFF\" : \"#000\";\n  return (\n    <Container>\n      {title && <Title color={textColor}>{title}</Title>}\n      <Body color={textColor}>{body}</Body>\n      <Form action={formUrl} target=\"_blank\">\n        <InputField\n          placeholder=\"Email\"\n          type=\"email\"\n          autoComplete=\"off\"\n          name={inputName}\n        />\n        <Button type=\"submit\">{buttonTitle}</Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\n\nexport const episodeFiveTranscript = {\n  embedLink:\n    \"https://anchor.fm/christopher-read/embed/episodes/Accounting-Software-e4ckrj/a-aharlm\",\n  date: \"Apr 30 2019\",\n  location: \"San Francisco, CA\",\n  title: \"Accounting Software\",\n  personTitle: \"Michael Tannenbaum\",\n  transcript: [\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          Hi, welcome to brex in the black. We&#39;ve got our CFO Michael here\n          to talk about accounting software. Michael, thanks so much for coming\n          on.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: <React.Fragment>Thank you.</React.Fragment>,\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          So what is the accounting software that any startup should really\n          consider for accounting?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          So there&#39;s two that people tend to use. One is QuickBooks and the\n          other is xero. I think that a startup has got to be using the online\n          version of both — xero only has an online version, QuickBooks does\n          have a desktop and online,\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          And what&#39;s the difference between the online versus the desktop?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          So the online is the mean one to use. If you&#39;re downloading\n          software on your computer, which I know for most modern people, they\n          forget that that even is a possibility, but there&#39;s a lot of old\n          school finance people out there. The reason not to do that, besides\n          that it seems old school, is that a lot of the integrations, for\n          example, the integrations with bank accounts with expense management\n          software with credit cards, like brex, those are all done to the\n          online version. So xero, in some ways, seems more advanced, because\n          they only have an online version. But actually, QuickBooks tends to be\n          the most popular for startups. Particularly because it&#39;s got the\n          biggest ecosystem, it&#39;s got the most third party accountants that\n          are familiar with it. And it&#39;s very intuitive and easy to use.\n          It&#39;s actually a great product. Xero people like, especially people\n          who are international, who have who started on IFRS — which is the\n          accounting standard that the rest of the world uses — we use GAAP of\n          course, we do everything differently here in the US right. And so\n          because of that those some of those people are more comfortable on\n          Xero. Its a company based in New Zealand. So it&#39;s really popular\n          in the Commonwealth countries - those that used to be part of the UK.\n          So that&#39;s the primary difference.\n          <br />\n          <br />\n          As companies grow, they usually transition over to NetSuite.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          So what is Netsuite and what&#39;s behind that?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          Sure. So I think NetSuite is definitely the gold standard to use among\n          the upmarket ERP, or enterprise resource planning software, or just\n          accounting software to keep it simple. NetSuite is also cloud hosted.\n          It&#39;s owned by Oracle now, but it was at one time a startup itself.\n          So the transition between something like a QuickBooks or Xero to\n          NetSuite usually only comes when you have an experienced finance\n          person, because without an experienced finance person or someone who\n          cares about finance, they&#39;re not even going to understand the\n          nuances between the two. NetSuite is customized.\n          <br />\n          <br />\n          One of those I should have started with is that for QuickBooks and\n          Xero, you can set up out of the box, it&#39;s very self serve, you\n          just sign up, you create your general ledger accounts - something\n          we&#39;re covering on a different podcast. And you go from there.\n          NetSuite you sort of need someone working with you. Implementing\n          NetSuite, it typically connects to other processes in your company. So\n          it&#39;s a more sophisticated setup. When you need that level of\n          sophistication, you need a real finance person managing that.\n          <br />\n          <br />\n          And so I can see you&#39;re looking at me with questioning eyes, which\n          is fine. And the reason is probably because I haven&#39;t explained\n          what actually NetSuite does that QuickBooks doesn&#39;t, and what\n          NetSuite does.\n          <br />\n          <br />\n          There&#39;s a couple things, but the main thing is this concept of\n          approval flows. Or you could say review of journal entries. So the\n          primary function of an accounting software is to post a journal entry,\n          write some debit, and some credit and define how those to map to your\n          general ledgers or your income statement and balance sheet. When you\n          do that, and QuickBooks it, you just do it. When you do it in\n          NetSuite, you can set up that somebody actually reviews and approves\n          that entry, and make sure it&#39;s correct. And that level of approval\n          and review is necessary as you get larger, and you want to introduce\n          controls and a sort of controlled environment in your financials. And\n          if you&#39;re audited, there will be that expectation that journal\n          entries in particular are reviewed. In Xero and QuickBooks, they\n          don&#39;t have that functionality, you just self service post a entry.\n          And that&#39;s because tipically those products really just serve\n          small businesses. And look when you&#39;re just a startup trying to\n          get yourself moving, and you&#39;re worried about product market fit\n          and all these other things, having approval flows with your journal\n          entries pretty is low on the list. But it starts to become higher on\n          your list as you become more mature of a business. And as you have a\n          real accounting and finance team. There&#39;s the expectation that\n          your books need to be right. And one of the ways to ensure they&#39;re\n          right is to have a review of journal entries.\n          <br />\n          <br />\n          NetSuite, relative to QuickBooks and Xero, also has multi-entity. So\n          usually when you&#39;re first starting, you have one legal entity,\n          right? It&#39;s just the entity that everything&#39;s happening in -\n          one legal entity. But then if you go international, or you create a\n          subsidiary that&#39;s doing something else as your business gets more\n          sophisticated, that legal entity has its own books and records. And if\n          it&#39;s regulated, it&#39;s important that you track specific\n          expenses in that entity. If it&#39;s taxed in a different way,\n          it&#39;s important that you track specific expenses. So as you need to\n          start tracking activity, both revenue and expenses in a specific\n          entity other than your primary entity, NetSuite supports that really\n          well, whereas QuickBooks and Xero won&#39;t.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          Gotcha. But for most startups, sounds like Quickbooks or Xero.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          Yeah, I mean, for your standard early stage startup that&#39;s just\n          doing its thing, your QuickBooks and Xero are great products.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          So what&#39;s the other accounting software that&#39;s also important?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          So outside of EPS, I think that those are pretty robust systems that\n          will do accounts payable, they&#39;ll track your general ledger, and\n          they&#39;ll do reporting. So you&#39;ll get income statement and\n          balance sheet reporting from all three of those. I don&#39;t think you\n          need much else besides those. But some people want a third party\n          expense management software, expensify is really popular among\n          startups for that. Some people will want a bill pay sort of module or\n          you could say an accounts payable module — Bill.com tends to be\n          popular among startups for that. One limitation of QuickBooks or Xero\n          is that they&#39;re not actually great platforms to pay bills from -\n          you enter a bill but you can&#39;t actually create a payment in a\n          future date from them. And so it&#39;s important to have some people,\n          who want to manage lots of accounts payable, they&#39;ll use something\n          like Bill.com, as I mentioned. But I would say that [the ERPs],\n          that&#39;s really the main thing that you need.ou&#39;re going to\n          always have a bank account software that you&#39;re working with, as\n          well.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          Now in terms of process, in terms of on the company side, you have the\n          software, how do you make sure that things are set up such that the\n          books are actually correct?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          Sure. So I think a good thing to do is to reconcile against third\n          party statements or facts that are true in the world. So an obvious\n          one is bank account, right? So does your bank account match your bank\n          statement at the end of the month? What&#39;s your cash is super easy\n          thing to do. Well, super obvious reconciliation to do. Not so obvious,\n          not so easy all the time. And then there&#39;s always some reconciling\n          items in that, for example, you could have a check that hasn&#39;t\n          cleared. So that would be one example of where there&#39;d be a\n          difference in your two balances, right? Just because the check\n          hasn&#39;t cleared, doesn&#39;t mean that it wasn&#39;t a real\n          expense, you spent the money, they just haven&#39;t cashed the check.\n          So that&#39;s one area of difference. But in general, that&#39;s\n          reconciliation to a third party that&#39;s common to do. Another one\n          would be just to look at a sample of some expenses. So for example, a\n          couple credit card transactions, make sure that what your credit card\n          statement says shows up in your books. Another example might be other\n          with Brex, you actually don&#39;t have to do that - we do that for\n          you. Another thing that you might want to do is have a third party\n          help determine your revenue. You want to look to see what they&#39;re\n          reporting and what you&#39;re reporting, for example - an invoice for\n          how many units you shipped to a specific vendor, you&#39;d want to\n          reconcile that with your own. Does that make sense?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          That makes sense. So who in the company should have access to these\n          accounting software tools?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          Sure. So we live in this world of transparency - overall, I think\n          that&#39;s great. But I also think that in terms of the actual\n          accounting software, you don&#39;t need everyone to have access,\n          really just the person who&#39;s doing the accounting and finance in\n          that team is really the only person who needs it. Sometimes,\n          oftentimes CEOs will want to get in the mix, I tend to push back\n          there.\n          <br />\n          <br />I would recommend that everybody has visibility into the\n          reporting. So the income statement, the balance sheet, that statement\n          of cash flows that are being generated each month, I think everybody\n          should see that. But I don&#39;t think that everybody needs access.\n        </React.Fragment>\n      ),\n    },\n\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          And why do you push back against the CEO in particular?\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: (\n        <React.Fragment>\n          Because usually CEOs, they have this niche. I mean, I&#39;ve worked\n          for a couple of different CEOs, they all kind of do this, like, let me\n          just get into the books and sort of see what&#39;s the answer to the\n          question I&#39;m trying to answer. And I think that you should just\n          try to understand what they&#39;re looking for and help them get\n          there. Because unless they happen to be a pro with QuickBooks Online\n          or NetSuite, it&#39;s probably not going to be as efficient as you\n          helping them. So I usually push back there.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Chris R\",\n      text: (\n        <React.Fragment>\n          All right, Michael, thanks so much for coming on brex in the black.\n        </React.Fragment>\n      ),\n    },\n    {\n      speaker: \"Michael Tannenbaum\",\n      text: <React.Fragment>Thank you.</React.Fragment>,\n    },\n  ],\n};\n","import React from \"react\";\n\nimport Layout from \"components/layout\";\n\nimport TranscriptHero from \"components/podcast/transcriptHero\";\nimport Transcript from \"components/podcast/transcript\";\nimport { episodeFiveTranscript as transcript } from \"components/brexInTheBlack/episodeFiveTranscript\";\n\nconst Episode = ({ location }) => (\n  <Layout\n    location={location}\n    whiteContentBackground\n    title=\"Brex In the Black | Accounting Software\"\n    description=\"Quickbooks, Xero, Netsuite and Business Sophistication\"\n  >\n    <TranscriptHero\n      date={transcript.date}\n      location={transcript.location}\n      personTitle={transcript.personTitle}\n      title={transcript.title}\n    />\n    <Transcript\n      date={transcript.date}\n      embedLink={transcript.embedLink}\n      location={transcript.location}\n      title={transcript.title}\n      personTitle={transcript.personTitle}\n      transcript={transcript.transcript}\n    />\n  </Layout>\n);\n\nexport default Episode;\n"],"sourceRoot":""}